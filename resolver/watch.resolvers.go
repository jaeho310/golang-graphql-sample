package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"fmt"
	"graphql-sample/generated"
	"graphql-sample/resolver/types"
)

// CreateWatch is the resolver for the create_watch field.
func (r *mutationResolver) CreateWatch(ctx context.Context, input types.CreateWatchInput) (*types.Watch, error) {
	panic(fmt.Errorf("not implemented: CreateWatch - create_watch"))
}

// WatchList is the resolver for the watch_list field.
func (r *queryResolver) WatchList(ctx context.Context) (*types.WatchList, error) {
	panic(fmt.Errorf("not implemented: WatchList - watch_list"))
}

// Watch is the resolver for the watch field.
func (r *subscriptionResolver) Watch(ctx context.Context) (<-chan *types.Watch, error) {
	panic(fmt.Errorf("not implemented: Watch - watch"))
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
