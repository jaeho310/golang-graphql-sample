package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"graphql-sample/generated"
	"graphql-sample/resolver/types"
	"graphql-sample/service"
	"strconv"
)

// CreateUser is the resolver for the create_user field.
func (r *mutationResolver) CreateUser(ctx context.Context, input types.CreateUserInput) (*types.User, error) {
	user, err := service.UserService{}.CreateUser(input)
	if err != nil {
		return nil, err
	}
	return user.GetGqlResponse(), nil
}

// UserList is the resolver for the user_list field.
func (r *queryResolver) UserList(ctx context.Context) (*types.UserList, error) {
	userList, err := service.UserService{}.GetUserList()
	if err != nil {
		return nil, err
	}
	var list []*types.User
	for _, user := range userList {
		list = append(list, user.GetGqlResponse())
	}
	return &types.UserList{List: list}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input types.UserInput) (*types.User, error) {
	userId, err := strconv.Atoi(input.ID)
	if err != nil {
		return nil, err
	}
	user, err := service.UserService{}.GetUser(userId)
	if err != nil {
		return nil, err
	}
	// gorm model과 types.user는 필드와 타입이 다르니 변환하는 메서드를 하나 구축합니다.
	return user.GetGqlResponse(), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
